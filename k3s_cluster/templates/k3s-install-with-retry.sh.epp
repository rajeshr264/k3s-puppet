#!/bin/bash
# k3s-install-with-retry.sh.epp - K3S installation with RPM lock handling and retry logic
# Generated by Puppet - DO NOT EDIT MANUALLY

set -e

# Configuration
K3S_VERSION="<%= $k3s_cluster::version %>"
K3S_NODE_TYPE="<%= $k3s_cluster::node_type %>"
INSTALL_SCRIPT_URL="<%= $k3s_cluster::params::install_script_url %>"
MAX_ATTEMPTS=3
RETRY_DELAY=30

echo "üöÄ Starting K3S installation with retry logic..."
echo "Version: ${K3S_VERSION}"
echo "Node Type: ${K3S_NODE_TYPE}"

# Function to check if RPM is locked
check_rpm_lock() {
    if command -v rpm >/dev/null 2>&1 && fuser /var/lib/rpm/.rpm.lock >/dev/null 2>&1; then
        return 0  # locked
    else
        return 1  # not locked
    fi
}

# Function to wait for RPM lock release
wait_for_rpm_lock() {
    if ! command -v rpm >/dev/null 2>&1; then
        echo "‚ÑπÔ∏è  Non-RPM system, skipping lock checks"
        return 0
    fi
    
    echo "üîç Checking for RPM locks..."
    local timeout=300  # 5 minutes
    local elapsed=0
    
    while check_rpm_lock; do
        if [ $elapsed -ge $timeout ]; then
            echo "‚è∞ Timeout waiting for RPM lock, forcing cleanup..."
            rm -f /var/lib/rpm/.rpm.lock /var/lib/rpm/.dbenv.lock || true
            break
        fi
        echo "üîí RPM database locked, waiting... ($elapsed/$timeout seconds)"
        sleep 10
        elapsed=$((elapsed + 10))
    done
}

# Function to clean up package processes
cleanup_package_processes() {
    if ! command -v rpm >/dev/null 2>&1; then
        return 0
    fi
    
    echo "üßπ Cleaning up package processes..."
    pkill -f "yum" 2>/dev/null || true
    pkill -f "dnf" 2>/dev/null || true
    pkill -f "rpm" 2>/dev/null || true
    pkill -f "packagekit" 2>/dev/null || true
    
    # Temporarily stop interfering services
    systemctl stop packagekit 2>/dev/null || true
    systemctl stop amazon-ssm-agent 2>/dev/null || true
    sleep 3
}

# Function to restart services
restart_services() {
    if command -v rpm >/dev/null 2>&1; then
        echo "üîÑ Restarting services..."
        systemctl start packagekit 2>/dev/null || true
        systemctl start amazon-ssm-agent 2>/dev/null || true
    fi
}

# Function to download installation script
download_install_script() {
    echo "üì• Downloading K3S installation script..."
    
    if command -v wget >/dev/null 2>&1; then
        wget -O /tmp/k3s-install-original.sh "${INSTALL_SCRIPT_URL}"
    elif command -v curl >/dev/null 2>&1; then
        curl -sfL "${INSTALL_SCRIPT_URL}" -o /tmp/k3s-install-original.sh
    else
        echo "‚ùå Neither wget nor curl available"
        return 1
    fi
    
    chmod +x /tmp/k3s-install-original.sh
}

# Function to install K3S with retry logic
install_k3s_with_retry() {
    local attempt
    
    for attempt in $(seq 1 $MAX_ATTEMPTS); do
        echo "üéØ K3S installation attempt $attempt/$MAX_ATTEMPTS..."
        
        # Pre-installation cleanup for RPM systems
        if command -v rpm >/dev/null 2>&1; then
            wait_for_rpm_lock
            cleanup_package_processes
        fi
        
        # Set environment variables
        export INSTALL_K3S_VERSION="${K3S_VERSION}"
        export INSTALL_K3S_EXEC="${K3S_NODE_TYPE}"
        
        <% if $k3s_cluster::node_type == 'agent' and $k3s_cluster::server_url { -%>
        export K3S_URL="<%= $k3s_cluster::server_url %>"
        <% } -%>
        <% if $k3s_cluster::token { -%>
        export K3S_TOKEN="<%= $k3s_cluster::token %>"
        <% } -%>
        
        # Attempt installation
        if sh /tmp/k3s-install-original.sh; then
            echo "‚úÖ K3S installation successful on attempt $attempt"
            restart_services
            return 0
        else
            echo "‚ùå Installation attempt $attempt failed"
            
            if [ $attempt -lt $MAX_ATTEMPTS ]; then
                echo "‚è≥ Retrying in ${RETRY_DELAY} seconds..."
                
                # Clean up partial installation
                systemctl stop k3s 2>/dev/null || true
                systemctl stop k3s-agent 2>/dev/null || true
                rm -f /usr/local/bin/k3s 2>/dev/null || true
                rm -f /etc/systemd/system/k3s.service 2>/dev/null || true
                rm -f /etc/systemd/system/k3s-agent.service 2>/dev/null || true
                systemctl daemon-reload 2>/dev/null || true
                
                sleep $RETRY_DELAY
            fi
        fi
    done
    
    echo "‚ùå All K3S installation attempts failed"
    restart_services
    return 1
}

# Function to verify installation
verify_installation() {
    echo "üîç Verifying K3S installation..."
    
    local service_name
    if [ "${K3S_NODE_TYPE}" = "agent" ]; then
        service_name="k3s-agent"
    else
        service_name="k3s"
    fi
    
    # Check if binary exists
    if [ ! -f /usr/local/bin/k3s ]; then
        echo "‚ùå K3S binary not found"
        return 1
    fi
    
    # Check if service exists
    if ! systemctl list-unit-files | grep -q "${service_name}"; then
        echo "‚ùå K3S service not found"
        return 1
    fi
    
    echo "‚úÖ K3S installation verified"
    return 0
}

# Main execution
main() {
    echo "üèÅ Starting K3S installation process..."
    
    # Download installation script
    if ! download_install_script; then
        echo "‚ùå Failed to download installation script"
        exit 1
    fi
    
    # Install K3S with retry logic
    if install_k3s_with_retry; then
        # Verify installation
        if verify_installation; then
            echo "üéâ K3S installation completed successfully!"
            exit 0
        else
            echo "‚ùå Installation verification failed"
            exit 1
        fi
    else
        echo "‚ùå K3S installation failed after $MAX_ATTEMPTS attempts"
        exit 1
    fi
}

# Set up cleanup trap
trap 'restart_services' EXIT

# Run main function
main "$@" 