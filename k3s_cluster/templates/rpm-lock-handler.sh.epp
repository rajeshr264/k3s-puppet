#!/bin/bash
# rpm-lock-handler.sh.epp - Handle RPM lock issues before K3S installation
# Generated by Puppet - DO NOT EDIT MANUALLY

set -e

echo "🔍 Checking for RPM transaction locks..."

# Function to check if RPM is locked
check_rpm_lock() {
    if fuser /var/lib/rpm/.rpm.lock >/dev/null 2>&1; then
        return 0  # locked
    else
        return 1  # not locked
    fi
}

# Function to wait for RPM lock release
wait_for_rpm_lock() {
    local timeout=300  # 5 minutes
    local elapsed=0
    
    while check_rpm_lock; do
        if [ $elapsed -ge $timeout ]; then
            echo "⏰ Timeout waiting for RPM lock to be released"
            echo "🧹 Forcing cleanup of stale lock files..."
            rm -f /var/lib/rpm/.rpm.lock
            rm -f /var/lib/rpm/.dbenv.lock
            break
        fi
        echo "🔒 RPM database is locked, waiting... ($elapsed/$timeout seconds)"
        sleep 10
        elapsed=$((elapsed + 10))
    done
}

# Function to clean up package processes
cleanup_package_processes() {
    echo "🧹 Cleaning up any hanging package processes..."
    
    # Kill hanging package manager processes
    pkill -f "yum" 2>/dev/null || true
    pkill -f "dnf" 2>/dev/null || true
    pkill -f "rpm" 2>/dev/null || true
    pkill -f "packagekit" 2>/dev/null || true
    
    # Stop services that might interfere (temporarily)
    systemctl stop packagekit 2>/dev/null || true
    systemctl stop amazon-ssm-agent 2>/dev/null || true
    
    # Wait for processes to fully stop
    sleep 5
}

# Function to restart services
restart_services() {
    echo "🔄 Restarting system services..."
    systemctl start packagekit 2>/dev/null || true
    systemctl start amazon-ssm-agent 2>/dev/null || true
}

# Only run RPM lock handling on RPM-based systems
if command -v rpm >/dev/null 2>&1; then
    echo "📦 RPM-based system detected, checking for locks..."
    
    # Step 1: Wait for any existing RPM operations to complete
    wait_for_rpm_lock
    
    # Step 2: Clean up hanging processes
    cleanup_package_processes
    
    echo "✅ RPM lock handling completed"
    
    # Set up trap to restart services on exit
    trap 'restart_services' EXIT
else
    echo "ℹ️  Non-RPM system, skipping RPM lock checks"
fi

echo "🚀 System ready for K3S installation" 