#!/bin/bash
# wait-for-token-ready.sh.epp - Wait for K3S server token to be ready before export
# Generated by Puppet - DO NOT EDIT MANUALLY

set -e

echo "üîë Waiting for K3S server token to be ready..."

# Configuration
MAX_ATTEMPTS=30
CHECK_INTERVAL=10
TOKEN_FILE="/var/lib/rancher/k3s/server/node-token"

# Function to validate token format
validate_token_format() {
    local token="$1"
    
    # Check token length (K3S tokens are typically 50+ characters)
    if [ ${#token} -lt 40 ]; then
        return 1
    fi
    
    # Check token starts with K followed by hex characters
    if [[ ! $token =~ ^K[0-9a-f] ]]; then
        return 1
    fi
    
    return 0
}

# Function to test token authentication
test_token_auth() {
    local token="$1"
    
    # Test basic kubectl command with the token
    if k3s kubectl get nodes --token="$token" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Main token readiness loop
for attempt in $(seq 1 $MAX_ATTEMPTS); do
    echo "üîç Checking token readiness (attempt $attempt/$MAX_ATTEMPTS)..."
    
    # Check if token file exists
    if [ ! -f "$TOKEN_FILE" ]; then
        echo "‚è≥ Token file not found, waiting..."
        sleep $CHECK_INTERVAL
        continue
    fi
    
    # Read token and clean it
    token=$(cat "$TOKEN_FILE" 2>/dev/null | tr -d '\n\r' | tr -d ' ')
    
    if [ -z "$token" ]; then
        echo "‚è≥ Token file empty, waiting..."
        sleep $CHECK_INTERVAL
        continue
    fi
    
    # Validate token format
    if ! validate_token_format "$token"; then
        echo "‚ö†Ô∏è  Invalid token format: ${token:0:20}... (length: ${#token})"
        sleep $CHECK_INTERVAL
        continue
    fi
    
    echo "‚úÖ Valid token format found: ${token:0:15}..."
    
    # Test token authentication
    echo "üîç Testing token authentication..."
    if test_token_auth "$token"; then
        echo "‚úÖ Token authentication successful"
        echo "üéâ K3S server token is ready!"
        
        # Output token for collection
        echo "TOKEN_READY:$token"
        exit 0
    else
        echo "‚ö†Ô∏è  Token authentication failed, waiting for API server..."
        sleep $CHECK_INTERVAL
        continue
    fi
done

echo "‚ùå Token failed to become ready after $(($MAX_ATTEMPTS * $CHECK_INTERVAL)) seconds"
exit 1 